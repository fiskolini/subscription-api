"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var express_1 = __importDefault(require("express"));
var swagger_ui_express_1 = __importDefault(require("swagger-ui-express"));
var get_port_1 = __importDefault(require("get-port"));
var got_1 = __importDefault(require("got"));
var path_1 = require("path");
var is_url_1 = __importDefault(require("is-url"));
var upath_1 = require("upath");
/**
 * Start server by calling this function
 * @param {string} file swagger.json file
 * @param {string} requestedPort choose a port, if not available
 * a random port is selected
 * @return {object} server object, just incase if required
 */
function startServerWithSwaggerFile(file, requestedPort) {
    if (requestedPort === void 0) { requestedPort = 3344; }
    return __awaiter(this, void 0, void 0, function () {
        var port, _a, parsedDoc, swagFilePath, app, server;
        return __generator(this, function (_b) {
            switch (_b.label) {
                case 0: return [4 /*yield*/, get_port_1.default({ port: requestedPort })];
                case 1:
                    port = _b.sent();
                    return [4 /*yield*/, getSwaggerDoc(file)];
                case 2:
                    _a = _b.sent(), parsedDoc = _a.parsedDoc, swagFilePath = _a.swagFilePath;
                    app = express_1.default();
                    app.use('/swagger-doc', swagger_ui_express_1.default.serve, swagger_ui_express_1.default.setup(parsedDoc));
                    server = app.listen(port);
                    return [2 /*return*/, { app: app, port: port, server: server, swagFilePath: swagFilePath }];
            }
        });
    });
}
exports.startServerWithSwaggerFile = startServerWithSwaggerFile;
/**
 * Resolves the path to either url or correct file path
 * @param {string} file url or file path to swagger.json
 * @return {string} resolved file name/url
 */
function pathResolver(file) {
    var swagFilePath = is_url_1.default(file) // is file url
        ? file
        : path_1.isAbsolute(file) // is absolute path
            ? upath_1.toUnix(file)
            : upath_1.toUnix(path_1.resolve(process.cwd(), file));
    return swagFilePath;
}
/**
 *
 * @param {string} file The swagger file path
 * @return {object} swagger doc
 */
function getSwaggerDoc(file) {
    return __awaiter(this, void 0, void 0, function () {
        var swagFilePath, parsedDoc, err_1, swaggerDocString, err_2;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    swagFilePath = pathResolver(file);
                    parsedDoc = {};
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 2, , 7]);
                    // check file
                    parsedDoc = require(swagFilePath);
                    return [3 /*break*/, 7];
                case 2:
                    err_1 = _a.sent();
                    _a.label = 3;
                case 3:
                    _a.trys.push([3, 5, , 6]);
                    return [4 /*yield*/, got_1.default(swagFilePath)];
                case 4:
                    swaggerDocString = (_a.sent()).body;
                    try {
                        parsedDoc = JSON.parse(swaggerDocString);
                    }
                    catch (err) {
                        throw new Error('The JSON is malformed');
                    }
                    return [3 /*break*/, 6];
                case 5:
                    err_2 = _a.sent();
                    throw new Error("The given swagger file (" + swagFilePath + ") could not be found.");
                case 6: return [3 /*break*/, 7];
                case 7: return [2 /*return*/, { parsedDoc: parsedDoc, swagFilePath: swagFilePath }];
            }
        });
    });
}
//# sourceMappingURL=app.js.map